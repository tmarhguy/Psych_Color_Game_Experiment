{"ast":null,"code":"var _jsxFileName = \"/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./assets/styles/main.css\";\nimport AnimalGrid from \"./components/AnimalGrid/AnimalGrid\";\nimport ColorPicker from \"./components/ColorPicker/ColorPicker\";\nimport ColorDisplay from \"./components/ColorDisplay/ColorDisplay\";\nimport ScoreBoard from \"./components/ScoreBoard/ScoreBoard\";\nimport { colorDistance } from \"./utils/colorUtils\";\n\n// Animal images\nimport dog from \"./assets/images/dog.jpg\";\nimport butterfly from \"./assets/images/butterfly.jpg\";\nimport giraffe from \"./assets/images/giraffe.png\";\nimport deer from \"./assets/images/deer.png\";\nimport elephant from \"./assets/images/elephant.jpg\";\n\n// Animal data with names, images, and associated colors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANIMALS = [{\n  name: \"Dog\",\n  image: dog,\n  color: \"#deb887\"\n}, {\n  name: \"Giraffe\",\n  image: giraffe,\n  color: \"#f4e285\"\n}, {\n  name: \"Butterfly\",\n  image: butterfly,\n  color: \"#ff69b4\"\n}, {\n  name: \"Deer\",\n  image: deer,\n  color: \"#a0522d\"\n}, {\n  name: \"Elephant\",\n  image: elephant,\n  color: \"#b0b0b0\"\n}];\n\n// Tolerance for color matching\nconst COLOR_TOLERANCE = 60;\nexport default function App() {\n  _s();\n  const [selectedColor, setSelectedColor] = useState(\"#FFFFFF\");\n  const [score, setScore] = useState(0);\n  const [timer, setTimer] = useState(10); // Countdown timer initialized to 10 seconds\n  const [refreshPositions, setRefreshPositions] = useState(0); // Trigger for refreshing animal positions\n\n  // Function to handle color matching and scoring\n  const handleColorMatch = animalColor => {\n    const distance = colorDistance(selectedColor, animalColor);\n    if (distance <= COLOR_TOLERANCE) {\n      setScore(prevScore => prevScore + 1);\n    }\n  };\n\n  // Function to handle color change\n  const handleColorChange = newColor => {\n    setSelectedColor(newColor);\n    setTimeout(() => {\n      setSelectedColor(\"#FFFFFF\");\n    }, 1700);\n  };\n\n  // Countdown timer logic\n  useEffect(() => {\n    if (timer > 0) {\n      const interval = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1); // Decrement timer by 1\n      }, 1000);\n      return () => clearInterval(interval); // Cleanup interval on unmount or when timer changes\n    } else {\n      // Reset timer and randomize animal positions when the timer ends\n      setTimer(10); // Reset timer to 10 seconds\n      setRefreshPositions(prev => prev + 1); // Trigger animal position refresh\n    }\n  }, [timer]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-root\",\n    children: [/*#__PURE__*/_jsxDEV(AnimalGrid, {\n      animals: ANIMALS,\n      onAnimalClick: handleColorMatch,\n      refreshPositions: refreshPositions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ColorPicker, {\n      onColorChange: handleColorChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"color-display-container\",\n      children: [/*#__PURE__*/_jsxDEV(ColorDisplay, {\n        color: selectedColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"color-display\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: \"2em\",\n            fontWeight: \"bold\"\n          },\n          children: timer > 0 ? `Timer: ${timer}s` : \"Time's up!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"armcn3VA5WvNB3ClQnksH+5d0nY=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","AnimalGrid","ColorPicker","ColorDisplay","ScoreBoard","colorDistance","dog","butterfly","giraffe","deer","elephant","jsxDEV","_jsxDEV","ANIMALS","name","image","color","COLOR_TOLERANCE","App","_s","selectedColor","setSelectedColor","score","setScore","timer","setTimer","refreshPositions","setRefreshPositions","handleColorMatch","animalColor","distance","prevScore","handleColorChange","newColor","setTimeout","interval","setInterval","prevTimer","clearInterval","prev","className","children","animals","onAnimalClick","fileName","_jsxFileName","lineNumber","columnNumber","onColorChange","style","fontSize","fontWeight","_c","$RefreshReg$"],"sources":["/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./assets/styles/main.css\";\nimport AnimalGrid from \"./components/AnimalGrid/AnimalGrid\";\nimport ColorPicker from \"./components/ColorPicker/ColorPicker\";\nimport ColorDisplay from \"./components/ColorDisplay/ColorDisplay\";\nimport ScoreBoard from \"./components/ScoreBoard/ScoreBoard\";\nimport { colorDistance } from \"./utils/colorUtils\";\n\n// Animal images\nimport dog from \"./assets/images/dog.jpg\";\nimport butterfly from \"./assets/images/butterfly.jpg\";\nimport giraffe from \"./assets/images/giraffe.png\";\nimport deer from \"./assets/images/deer.png\";\nimport elephant from \"./assets/images/elephant.jpg\";\n\n// Animal data with names, images, and associated colors\nconst ANIMALS = [\n  { name: \"Dog\", image: dog, color: \"#deb887\" },\n  { name: \"Giraffe\", image: giraffe, color: \"#f4e285\" },\n  { name: \"Butterfly\", image: butterfly, color: \"#ff69b4\" },\n  { name: \"Deer\", image: deer, color: \"#a0522d\" },\n  { name: \"Elephant\", image: elephant, color: \"#b0b0b0\" },\n];\n\n// Tolerance for color matching\nconst COLOR_TOLERANCE = 60;\n\nexport default function App() {\n  const [selectedColor, setSelectedColor] = useState(\"#FFFFFF\");\n  const [score, setScore] = useState(0);\n  const [timer, setTimer] = useState(10); // Countdown timer initialized to 10 seconds\n  const [refreshPositions, setRefreshPositions] = useState(0); // Trigger for refreshing animal positions\n\n  // Function to handle color matching and scoring\n  const handleColorMatch = (animalColor) => {\n    const distance = colorDistance(selectedColor, animalColor);\n    if (distance <= COLOR_TOLERANCE) {\n      setScore((prevScore) => prevScore + 1);\n    }\n  };\n\n  // Function to handle color change\n  const handleColorChange = (newColor) => {\n    setSelectedColor(newColor);\n\n    setTimeout(() => {\n      setSelectedColor(\"#FFFFFF\");\n    }, 1700);\n  };\n\n  // Countdown timer logic\n  useEffect(() => {\n    if (timer > 0) {\n      const interval = setInterval(() => {\n        setTimer((prevTimer) => prevTimer - 1); // Decrement timer by 1\n      }, 1000);\n\n      return () => clearInterval(interval); // Cleanup interval on unmount or when timer changes\n    } else {\n      // Reset timer and randomize animal positions when the timer ends\n      setTimer(10); // Reset timer to 10 seconds\n      setRefreshPositions((prev) => prev + 1); // Trigger animal position refresh\n    }\n  }, [timer]);\n\n  return (\n    <div className=\"app-root\">\n\n      <AnimalGrid\n        animals={ANIMALS}\n        onAnimalClick={handleColorMatch}\n        refreshPositions={refreshPositions}\n      />\n\n      <ColorPicker onColorChange={handleColorChange} />\n\n      <div className=\"color-display-container\">\n        {/* First rectangle: Displays the selected color */}\n        <ColorDisplay color={selectedColor} />\n\n        {/* Second rectangle: Displays the countdown timer */}\n        <div className=\"color-display\">\n          <p style={{ fontSize: \"2em\", fontWeight: \"bold\" }}>\n            {timer > 0 ? `Timer: ${timer}s` : \"Time's up!\"}\n          </p>\n        </div>\n      </div>\n\n      <ScoreBoard score={score} />\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}