{"ast":null,"code":"var _jsxFileName = \"/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./assets/styles/main.css\";\nimport SenderScreen from \"./screens/SenderScreen\";\nimport ReceiverScreen from \"./screens/ReceiverScreen\";\nimport { colorDistance } from \"./utils/colorUtils\";\n\n// Animal images\nimport dog from \"./assets/images/dog.jpg\";\nimport butterfly from \"./assets/images/butterfly.jpg\";\nimport giraffe from \"./assets/images/giraffe.png\";\nimport deer from \"./assets/images/deer.png\";\nimport elephant from \"./assets/images/elephant.jpg\";\n\n// Animal data with names, images, and associated colors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANIMALS = [{\n  name: \"Dog\",\n  image: dog,\n  color: \"#deb887\"\n}, {\n  name: \"Giraffe\",\n  image: giraffe,\n  color: \"#f4e285\"\n}, {\n  name: \"Butterfly\",\n  image: butterfly,\n  color: \"#ff69b4\"\n}, {\n  name: \"Deer\",\n  image: deer,\n  color: \"#a0522d\"\n}, {\n  name: \"Elephant\",\n  image: elephant,\n  color: \"#b0b0b0\"\n}];\n\n// Tolerance for color matching\nconst COLOR_TOLERANCE = 60;\nexport default function App() {\n  _s();\n  const [score, setScore] = useState(0);\n  const [timer, setTimer] = useState(10); // Countdown timer initialized to 10 seconds\n  const [refreshPositions, setRefreshPositions] = useState(0); // Trigger for refreshing animal positions\n  const [role, setRole] = useState(\"sender\"); // Track the current role: \"sender\" or \"receiver\"\n  const [senderColor, setSenderColor] = useState(\"#FFFFFF\"); // Color selected by the sender\n\n  // Function to handle color matching and scoring\n  const handleColorMatch = animalColor => {\n    const distance = colorDistance(senderColor, animalColor);\n    if (distance <= COLOR_TOLERANCE) {\n      setScore(prevScore => prevScore + 1);\n    }\n    setRole(\"sender\"); // Switch to sender role after animal selection\n    setTimer(10); // Reset the timer\n    setRefreshPositions(prev => prev + 1); // Randomize animal positions\n  };\n\n  // Function to handle color change\n  const handleColorChange = newColor => {\n    setSenderColor(newColor); // Update the sender's selected color\n    setRole(\"receiver\"); // Switch to receiver role after color selection\n    setTimer(10); // Reset the timer\n    setRefreshPositions(prev => prev + 1); // Randomize animal positions\n  };\n\n  // Reset the color display to default when the role changes\n  useEffect(() => {\n    setSenderColor(\"#FFFFFF\"); // Reset to default color\n  }, [role]);\n\n  // Countdown timer logic\n  useEffect(() => {\n    if (timer > 0) {\n      const interval = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1); // Decrement timer by 1\n      }, 1000);\n      return () => clearInterval(interval); // Cleanup interval on unmount or when timer changes\n    } else {\n      // Switch roles when the timer ends\n      setRole(prevRole => prevRole === \"sender\" ? \"receiver\" : \"sender\");\n      setTimer(10); // Reset timer to 10 seconds\n      setRefreshPositions(prev => prev + 1); // Trigger animal position refresh\n    }\n  }, [timer]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-root\",\n    children: role === \"sender\" ? /*#__PURE__*/_jsxDEV(SenderScreen, {\n      animals: ANIMALS,\n      refreshPositions: refreshPositions,\n      timer: timer,\n      senderColor: senderColor,\n      score: score,\n      onColorChange: handleColorChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ReceiverScreen, {\n      animals: ANIMALS,\n      refreshPositions: refreshPositions,\n      timer: timer,\n      senderColor: senderColor,\n      score: score,\n      onAnimalSelect: handleColorMatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1PHsQPlSZZhL031F38R3+SLcr8I=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SenderScreen","ReceiverScreen","colorDistance","dog","butterfly","giraffe","deer","elephant","jsxDEV","_jsxDEV","ANIMALS","name","image","color","COLOR_TOLERANCE","App","_s","score","setScore","timer","setTimer","refreshPositions","setRefreshPositions","role","setRole","senderColor","setSenderColor","handleColorMatch","animalColor","distance","prevScore","prev","handleColorChange","newColor","interval","setInterval","prevTimer","clearInterval","prevRole","className","children","animals","onColorChange","fileName","_jsxFileName","lineNumber","columnNumber","onAnimalSelect","_c","$RefreshReg$"],"sources":["/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./assets/styles/main.css\";\nimport SenderScreen from \"./screens/SenderScreen\";\nimport ReceiverScreen from \"./screens/ReceiverScreen\";\nimport { colorDistance } from \"./utils/colorUtils\";\n\n// Animal images\nimport dog from \"./assets/images/dog.jpg\";\nimport butterfly from \"./assets/images/butterfly.jpg\";\nimport giraffe from \"./assets/images/giraffe.png\";\nimport deer from \"./assets/images/deer.png\";\nimport elephant from \"./assets/images/elephant.jpg\";\n\n// Animal data with names, images, and associated colors\nconst ANIMALS = [\n  { name: \"Dog\", image: dog, color: \"#deb887\" },\n  { name: \"Giraffe\", image: giraffe, color: \"#f4e285\" },\n  { name: \"Butterfly\", image: butterfly, color: \"#ff69b4\" },\n  { name: \"Deer\", image: deer, color: \"#a0522d\" },\n  { name: \"Elephant\", image: elephant, color: \"#b0b0b0\" },\n];\n\n// Tolerance for color matching\nconst COLOR_TOLERANCE = 60;\n\nexport default function App() {\n  const [score, setScore] = useState(0);\n  const [timer, setTimer] = useState(10); // Countdown timer initialized to 10 seconds\n  const [refreshPositions, setRefreshPositions] = useState(0); // Trigger for refreshing animal positions\n  const [role, setRole] = useState(\"sender\"); // Track the current role: \"sender\" or \"receiver\"\n  const [senderColor, setSenderColor] = useState(\"#FFFFFF\"); // Color selected by the sender\n\n  // Function to handle color matching and scoring\n  const handleColorMatch = (animalColor) => {\n    const distance = colorDistance(senderColor, animalColor);\n    if (distance <= COLOR_TOLERANCE) {\n      setScore((prevScore) => prevScore + 1);\n    }\n    setRole(\"sender\"); // Switch to sender role after animal selection\n    setTimer(10); // Reset the timer\n    setRefreshPositions((prev) => prev + 1); // Randomize animal positions\n  };\n\n  // Function to handle color change\n  const handleColorChange = (newColor) => {\n    setSenderColor(newColor); // Update the sender's selected color\n    setRole(\"receiver\"); // Switch to receiver role after color selection\n    setTimer(10); // Reset the timer\n    setRefreshPositions((prev) => prev + 1); // Randomize animal positions\n  };\n\n  // Reset the color display to default when the role changes\n  useEffect(() => {\n    setSenderColor(\"#FFFFFF\"); // Reset to default color\n  }, [role]);\n\n  // Countdown timer logic\n  useEffect(() => {\n    if (timer > 0) {\n      const interval = setInterval(() => {\n        setTimer((prevTimer) => prevTimer - 1); // Decrement timer by 1\n      }, 1000);\n\n      return () => clearInterval(interval); // Cleanup interval on unmount or when timer changes\n    } else {\n      // Switch roles when the timer ends\n      setRole((prevRole) => (prevRole === \"sender\" ? \"receiver\" : \"sender\"));\n      setTimer(10); // Reset timer to 10 seconds\n      setRefreshPositions((prev) => prev + 1); // Trigger animal position refresh\n    }\n  }, [timer]);\n\n  return (\n    <div className=\"app-root\">\n      {role === \"sender\" ? (\n        <SenderScreen\n          animals={ANIMALS}\n          refreshPositions={refreshPositions}\n          timer={timer}\n          senderColor={senderColor}\n          score={score}\n          onColorChange={handleColorChange}\n        />\n      ) : (\n        <ReceiverScreen\n          animals={ANIMALS}\n          refreshPositions={refreshPositions}\n          timer={timer}\n          senderColor={senderColor}\n          score={score}\n          onAnimalSelect={handleColorMatch}\n        />\n      )}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}