{"ast":null,"code":"var _jsxFileName = \"/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/screens/SenderScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport AnimalGrid from \"../components/AnimalGrid/AnimalGrid\";\nimport ColorPicker from \"../components/ColorPicker/ColorPicker\";\nimport ColorDisplay from \"../components/ColorDisplay/ColorDisplay\";\nimport ScoreBoard from \"../components/ScoreBoard/ScoreBoard\";\nimport TimerDisplay from \"../components/TimerDisplay/TimerDisplay\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SenderScreen({\n  animals,\n  refreshPositions,\n  senderColor,\n  score,\n  onColorChange,\n  timerDisplay // Pass the TimerDisplay component as a prop\n}) {\n  _s();\n  const [displayColor, setDisplayColor] = useState(senderColor); // Local state for the color display\n\n  useEffect(() => {\n    // Update the display color when senderColor changes\n    setDisplayColor(senderColor);\n\n    // Reset the color to white after 2 seconds\n    const timeout = setTimeout(() => {\n      setDisplayColor(\"#FFFFFF\"); // Reset to white\n    }, 2000);\n\n    // Cleanup the timeout when the component unmounts or senderColor changes\n    return () => clearTimeout(timeout);\n  }, [senderColor]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AnimalGrid, {\n      animals: animals,\n      refreshPositions: refreshPositions,\n      role: \"sender\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ColorPicker, {\n      onColorChange: onColorChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"color-display-container\",\n      children: [/*#__PURE__*/_jsxDEV(ColorDisplay, {\n        color: displayColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), \" \", timerDisplay, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(SenderScreen, \"dI8NPuYyD1YUFQrg5aKu8zvvkUI=\");\n_c = SenderScreen;\nvar _c;\n$RefreshReg$(_c, \"SenderScreen\");","map":{"version":3,"names":["React","useEffect","useState","AnimalGrid","ColorPicker","ColorDisplay","ScoreBoard","TimerDisplay","jsxDEV","_jsxDEV","Fragment","_Fragment","SenderScreen","animals","refreshPositions","senderColor","score","onColorChange","timerDisplay","_s","displayColor","setDisplayColor","timeout","setTimeout","clearTimeout","children","role","fileName","_jsxFileName","lineNumber","columnNumber","className","color","_c","$RefreshReg$"],"sources":["/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/screens/SenderScreen.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport AnimalGrid from \"../components/AnimalGrid/AnimalGrid\";\nimport ColorPicker from \"../components/ColorPicker/ColorPicker\";\nimport ColorDisplay from \"../components/ColorDisplay/ColorDisplay\";\nimport ScoreBoard from \"../components/ScoreBoard/ScoreBoard\";\nimport TimerDisplay from \"../components/TimerDisplay/TimerDisplay\";\n\nexport default function SenderScreen({\n  animals,\n  refreshPositions,\n  senderColor,\n  score,\n  onColorChange,\n  timerDisplay, // Pass the TimerDisplay component as a prop\n}) {\n  const [displayColor, setDisplayColor] = useState(senderColor); // Local state for the color display\n\n  useEffect(() => {\n    // Update the display color when senderColor changes\n    setDisplayColor(senderColor);\n\n    // Reset the color to white after 2 seconds\n    const timeout = setTimeout(() => {\n      setDisplayColor(\"#FFFFFF\"); // Reset to white\n    }, 2000);\n\n    // Cleanup the timeout when the component unmounts or senderColor changes\n    return () => clearTimeout(timeout);\n  }, [senderColor]);\n\n  return (\n    <>\n      <AnimalGrid animals={animals} refreshPositions={refreshPositions} role=\"sender\" />\n      <ColorPicker onColorChange={onColorChange} />\n      <div className=\"color-display-container\">\n        <ColorDisplay color={displayColor} /> {/* Use the local displayColor state */}\n        {timerDisplay} {/* Use the TimerDisplay component */}\n      </div>\n      <ScoreBoard score={score} />\n    </>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,qCAAqC;AAC5D,OAAOC,WAAW,MAAM,uCAAuC;AAC/D,OAAOC,YAAY,MAAM,yCAAyC;AAClE,OAAOC,UAAU,MAAM,qCAAqC;AAC5D,OAAOC,YAAY,MAAM,yCAAyC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnE,eAAe,SAASC,YAAYA,CAAC;EACnCC,OAAO;EACPC,gBAAgB;EAChBC,WAAW;EACXC,KAAK;EACLC,aAAa;EACbC,YAAY,CAAE;AAChB,CAAC,EAAE;EAAAC,EAAA;EACD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAACa,WAAW,CAAC,CAAC,CAAC;;EAE/Dd,SAAS,CAAC,MAAM;IACd;IACAoB,eAAe,CAACN,WAAW,CAAC;;IAE5B;IACA,MAAMO,OAAO,GAAGC,UAAU,CAAC,MAAM;MAC/BF,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC;IAC9B,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,OAAO,MAAMG,YAAY,CAACF,OAAO,CAAC;EACpC,CAAC,EAAE,CAACP,WAAW,CAAC,CAAC;EAEjB,oBACEN,OAAA,CAAAE,SAAA;IAAAc,QAAA,gBACEhB,OAAA,CAACN,UAAU;MAACU,OAAO,EAAEA,OAAQ;MAACC,gBAAgB,EAAEA,gBAAiB;MAACY,IAAI,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClFrB,OAAA,CAACL,WAAW;MAACa,aAAa,EAAEA;IAAc;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7CrB,OAAA;MAAKsB,SAAS,EAAC,yBAAyB;MAAAN,QAAA,gBACtChB,OAAA,CAACJ,YAAY;QAAC2B,KAAK,EAAEZ;MAAa;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,KAAC,EACrCZ,YAAY,EAAC,GAAC;IAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC,eACNrB,OAAA,CAACH,UAAU;MAACU,KAAK,EAAEA;IAAM;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAC5B,CAAC;AAEP;AAACX,EAAA,CAlCuBP,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}