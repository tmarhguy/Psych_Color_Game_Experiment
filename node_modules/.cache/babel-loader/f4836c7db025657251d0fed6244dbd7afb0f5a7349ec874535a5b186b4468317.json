{"ast":null,"code":"var _jsxFileName = \"/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./assets/styles/main.css\";\nimport AnimalGrid from \"./components/AnimalGrid\";\nimport ColorPicker from \"./components/ColorPicker\";\nimport ColorDisplay from \"./components/ColorDisplay\";\nimport ScoreBoard from \"./components/ScoreBoard\";\nimport { colorDistance } from \"./utils/colorUtils\";\n\n// Animal images\nimport dog from \"./assets/images/dog.jpg\";\nimport butterfly from \"./assets/images/butterfly.jpg\";\nimport giraffe from \"./assets/images/giraffe.png\";\nimport deer from \"./assets/images/deer.png\";\nimport elephant from \"./assets/images/elephant.jpg\";\n\n// Animal data with names, images, and associated colors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANIMALS = [{\n  name: \"Dog\",\n  image: dog,\n  color: \"#deb887\"\n}, {\n  name: \"Giraffe\",\n  image: giraffe,\n  color: \"#f4e285\"\n}, {\n  name: \"Butterfly\",\n  image: butterfly,\n  color: \"#ff69b4\"\n}, {\n  name: \"Deer\",\n  image: deer,\n  color: \"#a0522d\"\n}, {\n  name: \"Elephant\",\n  image: elephant,\n  color: \"#b0b0b0\"\n}];\n\n// Tolerance for color matching\nconst COLOR_TOLERANCE = 60;\nexport default function App() {\n  _s();\n  const [selectedColor, setSelectedColor] = useState(\"#FFFFFF\"); // Default selected color\n  const [previousColor, setPreviousColor] = useState(\"#FFFFFF\"); // Default previous color\n  const [score, setScore] = useState(0); // Initial score\n\n  // Function to handle color matching and scoring\n  const handleColorMatch = animalColor => {\n    const distance = colorDistance(selectedColor, animalColor);\n    if (distance <= COLOR_TOLERANCE) {\n      setScore(prevScore => prevScore + 1); // Increment score if within tolerance\n    }\n  };\n\n  // Function to handle color change\n  const handleColorChange = newColor => {\n    setPreviousColor(selectedColor); // Update previous color\n    setSelectedColor(newColor); // Update selected color\n\n    // Reset colors to white after 2 seconds\n    setTimeout(() => {\n      setPreviousColor(\"#FFFFFF\");\n      setSelectedColor(\"#FFFFFF\");\n    }, 1700);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-root\",\n    children: [/*#__PURE__*/_jsxDEV(AnimalGrid, {\n      animals: ANIMALS,\n      onAnimalClick: handleColorMatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ColorPicker, {\n      selectedColor: selectedColor,\n      onColorChange: handleColorChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"color-display-container\",\n      children: [/*#__PURE__*/_jsxDEV(ColorDisplay, {\n        color: selectedColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ColorDisplay, {\n        color: previousColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"uyqXRuPAwTVCMoXzHzRDnTzayXk=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","AnimalGrid","ColorPicker","ColorDisplay","ScoreBoard","colorDistance","dog","butterfly","giraffe","deer","elephant","jsxDEV","_jsxDEV","ANIMALS","name","image","color","COLOR_TOLERANCE","App","_s","selectedColor","setSelectedColor","previousColor","setPreviousColor","score","setScore","handleColorMatch","animalColor","distance","prevScore","handleColorChange","newColor","setTimeout","className","children","animals","onAnimalClick","fileName","_jsxFileName","lineNumber","columnNumber","onColorChange","_c","$RefreshReg$"],"sources":["/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/App.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./assets/styles/main.css\";\nimport AnimalGrid from \"./components/AnimalGrid\";\nimport ColorPicker from \"./components/ColorPicker\";\nimport ColorDisplay from \"./components/ColorDisplay\";\nimport ScoreBoard from \"./components/ScoreBoard\";\nimport { colorDistance } from \"./utils/colorUtils\";\n\n// Animal images\nimport dog from \"./assets/images/dog.jpg\";\nimport butterfly from \"./assets/images/butterfly.jpg\";\nimport giraffe from \"./assets/images/giraffe.png\";\nimport deer from \"./assets/images/deer.png\";\nimport elephant from \"./assets/images/elephant.jpg\";\n\n// Animal data with names, images, and associated colors\nconst ANIMALS = [\n  { name: \"Dog\", image: dog, color: \"#deb887\" },\n  { name: \"Giraffe\", image: giraffe, color: \"#f4e285\" },\n  { name: \"Butterfly\", image: butterfly, color: \"#ff69b4\" },\n  { name: \"Deer\", image: deer, color: \"#a0522d\" },\n  { name: \"Elephant\", image: elephant, color: \"#b0b0b0\" },\n];\n\n// Tolerance for color matching\nconst COLOR_TOLERANCE = 60;\n\nexport default function App() {\n  const [selectedColor, setSelectedColor] = useState(\"#FFFFFF\"); // Default selected color\n  const [previousColor, setPreviousColor] = useState(\"#FFFFFF\"); // Default previous color\n  const [score, setScore] = useState(0); // Initial score\n\n  // Function to handle color matching and scoring\n  const handleColorMatch = (animalColor) => {\n    const distance = colorDistance(selectedColor, animalColor);\n    if (distance <= COLOR_TOLERANCE) {\n      setScore((prevScore) => prevScore + 1); // Increment score if within tolerance\n    }\n  };\n\n  // Function to handle color change\n  const handleColorChange = (newColor) => {\n    setPreviousColor(selectedColor); // Update previous color\n    setSelectedColor(newColor); // Update selected color\n    \n    // Reset colors to white after 2 seconds\n    setTimeout(() => {\n      setPreviousColor(\"#FFFFFF\");\n      setSelectedColor(\"#FFFFFF\");\n    }, 1700);\n  };\n\n  return (\n    <div className=\"app-root\">\n      {/* Animal grid to display animals */}\n      <AnimalGrid animals={ANIMALS} onAnimalClick={handleColorMatch} />\n\n      {/* Color picker to select a color */}\n      <ColorPicker selectedColor={selectedColor} onColorChange={handleColorChange} />\n\n      {/* Container for two color displays */}\n      <div className=\"color-display-container\">\n        {/* First color display */}\n        <ColorDisplay color={selectedColor} />\n\n        {/* Second color display */}\n        <ColorDisplay color={previousColor} />\n      </div>\n\n      {/* Scoreboard to display the current score */}\n      <ScoreBoard score={score} />\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}