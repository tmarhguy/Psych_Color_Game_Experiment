{"ast":null,"code":"var _jsxFileName = \"/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./assets/styles/main.css\";\nimport { colorDistance } from \"./utils/colorUtils\";\nimport TimerDisplay from \"./components/TimerDisplay/TimerDisplay\";\nimport SenderScreen from \"./screens/SenderScreen\";\nimport ReceiverScreen from \"./screens/ReceiverScreen\";\n\n// Animal images\nimport dog from \"./assets/images/dog.jpg\";\nimport butterfly from \"./assets/images/butterfly.jpg\";\nimport giraffe from \"./assets/images/giraffe.png\";\nimport deer from \"./assets/images/deer.png\";\nimport elephant from \"./assets/images/elephant.jpg\";\n\n// Animal data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANIMALS = [{\n  name: \"Dog\",\n  image: dog,\n  color: \"#deb887\"\n}, {\n  name: \"Giraffe\",\n  image: giraffe,\n  color: \"#f4e285\"\n}, {\n  name: \"Butterfly\",\n  image: butterfly,\n  color: \"#ff69b4\"\n}, {\n  name: \"Deer\",\n  image: deer,\n  color: \"#a0522d\"\n}, {\n  name: \"Elephant\",\n  image: elephant,\n  color: \"#b0b0b0\"\n}];\nconst COLOR_TOLERANCE = 60;\nexport default function App() {\n  _s();\n  const [role, setRole] = useState(\"sender\"); // Current role: \"sender\" or \"receiver\"\n  const [senderColor, setSenderColor] = useState(\"#FFFFFF\"); // Color selected by the sender\n  const [score, setScore] = useState(0); // Current score\n  const [timer, setTimer] = useState(10); // Countdown timer\n  const [refreshPositions, setRefreshPositions] = useState(0); // Trigger for refreshing animal positions\n  const [selectedAnimalIndex, setSelectedAnimalIndex] = useState(0); // Track the currently selected animal\n\n  // Handle timer end (when timer reaches zero)\n  const handleTimerEnd = () => {\n    setRole(prevRole => prevRole === \"sender\" ? \"receiver\" : \"sender\");\n    setTimer(10); // Reset timer to 10 seconds\n    setRefreshPositions(prev => prev + 1); // Trigger animal position refresh\n  };\n\n  // Handle color change by the sender\n  const handleColorChange = newColor => {\n    setSenderColor(newColor); // Update the sender's selected color\n    setRole(\"receiver\"); // Switch to receiver role\n    setTimer(10); // Reset the timer\n    setRefreshPositions(prev => prev + 1); // Randomize animal positions\n  };\n\n  // Handle color matching and scoring by the receiver\n  const handleColorMatch = animalColor => {\n    const distance = colorDistance(senderColor, animalColor);\n    if (distance <= COLOR_TOLERANCE) {\n      setScore(prevScore => prevScore + 1); // Increment score if the color matches\n    }\n    setRole(\"sender\"); // Switch to sender role\n    setTimer(10); // Reset the timer\n    setRefreshPositions(prev => prev + 1); // Randomize animal positions\n  };\n\n  // Handle keyboard navigation for active selection\n  const handleKeyDown = event => {\n    if (role !== \"receiver\") return; // Only allow navigation in receiver role\n\n    if (event.key === \"ArrowRight\" || event.key === \"ArrowDown\") {\n      setSelectedAnimalIndex(prevIndex => (prevIndex + 1) % ANIMALS.length);\n    } else if (event.key === \"ArrowLeft\" || event.key === \"ArrowUp\") {\n      setSelectedAnimalIndex(prevIndex => (prevIndex - 1 + ANIMALS.length) % ANIMALS.length);\n    } else if (event.key === \"Enter\") {\n      handleColorMatch(ANIMALS[selectedAnimalIndex].color);\n    }\n  };\n\n  // Add event listener for keyboard navigation\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [role, selectedAnimalIndex]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-root\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer-boundary-container\",\n      children: [/*#__PURE__*/_jsxDEV(TimerDisplay, {\n        initialTime: 10,\n        onTimerEnd: handleTimerEnd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"color-picker\",\n        children: role === \"sender\" && /*#__PURE__*/_jsxDEV(SenderScreen, {\n          animals: ANIMALS,\n          refreshPositions: refreshPositions,\n          senderColor: senderColor,\n          score: score,\n          onColorChange: handleColorChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"color-display-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"color-display\",\n          children: role === \"receiver\" && /*#__PURE__*/_jsxDEV(ReceiverScreen, {\n            animals: ANIMALS,\n            refreshPositions: refreshPositions,\n            senderColor: senderColor,\n            score: score,\n            selectedAnimalIndex: selectedAnimalIndex,\n            onAnimalSelect: animal => handleColorMatch(animal.color)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fancy-score\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"V76P3NNrrBU8X7INyRrZhfdTeC0=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","colorDistance","TimerDisplay","SenderScreen","ReceiverScreen","dog","butterfly","giraffe","deer","elephant","jsxDEV","_jsxDEV","ANIMALS","name","image","color","COLOR_TOLERANCE","App","_s","role","setRole","senderColor","setSenderColor","score","setScore","timer","setTimer","refreshPositions","setRefreshPositions","selectedAnimalIndex","setSelectedAnimalIndex","handleTimerEnd","prevRole","prev","handleColorChange","newColor","handleColorMatch","animalColor","distance","prevScore","handleKeyDown","event","key","prevIndex","length","window","addEventListener","removeEventListener","className","children","initialTime","onTimerEnd","fileName","_jsxFileName","lineNumber","columnNumber","animals","onColorChange","onAnimalSelect","animal","_c","$RefreshReg$"],"sources":["/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./assets/styles/main.css\";\nimport { colorDistance } from \"./utils/colorUtils\";\nimport TimerDisplay from \"./components/TimerDisplay/TimerDisplay\";\nimport SenderScreen from \"./screens/SenderScreen\";\nimport ReceiverScreen from \"./screens/ReceiverScreen\";\n\n// Animal images\nimport dog from \"./assets/images/dog.jpg\";\nimport butterfly from \"./assets/images/butterfly.jpg\";\nimport giraffe from \"./assets/images/giraffe.png\";\nimport deer from \"./assets/images/deer.png\";\nimport elephant from \"./assets/images/elephant.jpg\";\n\n// Animal data\nconst ANIMALS = [\n  { name: \"Dog\", image: dog, color: \"#deb887\" },\n  { name: \"Giraffe\", image: giraffe, color: \"#f4e285\" },\n  { name: \"Butterfly\", image: butterfly, color: \"#ff69b4\" },\n  { name: \"Deer\", image: deer, color: \"#a0522d\" },\n  { name: \"Elephant\", image: elephant, color: \"#b0b0b0\" },\n];\n\nconst COLOR_TOLERANCE = 60;\n\nexport default function App() {\n  const [role, setRole] = useState(\"sender\"); // Current role: \"sender\" or \"receiver\"\n  const [senderColor, setSenderColor] = useState(\"#FFFFFF\"); // Color selected by the sender\n  const [score, setScore] = useState(0); // Current score\n  const [timer, setTimer] = useState(10); // Countdown timer\n  const [refreshPositions, setRefreshPositions] = useState(0); // Trigger for refreshing animal positions\n  const [selectedAnimalIndex, setSelectedAnimalIndex] = useState(0); // Track the currently selected animal\n\n  // Handle timer end (when timer reaches zero)\n  const handleTimerEnd = () => {\n    setRole((prevRole) => (prevRole === \"sender\" ? \"receiver\" : \"sender\"));\n    setTimer(10); // Reset timer to 10 seconds\n    setRefreshPositions((prev) => prev + 1); // Trigger animal position refresh\n  };\n\n  // Handle color change by the sender\n  const handleColorChange = (newColor) => {\n    setSenderColor(newColor); // Update the sender's selected color\n    setRole(\"receiver\"); // Switch to receiver role\n    setTimer(10); // Reset the timer\n    setRefreshPositions((prev) => prev + 1); // Randomize animal positions\n  };\n\n  // Handle color matching and scoring by the receiver\n  const handleColorMatch = (animalColor) => {\n    const distance = colorDistance(senderColor, animalColor);\n    if (distance <= COLOR_TOLERANCE) {\n      setScore((prevScore) => prevScore + 1); // Increment score if the color matches\n    }\n    setRole(\"sender\"); // Switch to sender role\n    setTimer(10); // Reset the timer\n    setRefreshPositions((prev) => prev + 1); // Randomize animal positions\n  };\n\n  // Handle keyboard navigation for active selection\n  const handleKeyDown = (event) => {\n    if (role !== \"receiver\") return; // Only allow navigation in receiver role\n\n    if (event.key === \"ArrowRight\" || event.key === \"ArrowDown\") {\n      setSelectedAnimalIndex((prevIndex) => (prevIndex + 1) % ANIMALS.length);\n    } else if (event.key === \"ArrowLeft\" || event.key === \"ArrowUp\") {\n      setSelectedAnimalIndex((prevIndex) =>\n        (prevIndex - 1 + ANIMALS.length) % ANIMALS.length\n      );\n    } else if (event.key === \"Enter\") {\n      handleColorMatch(ANIMALS[selectedAnimalIndex].color);\n    }\n  };\n\n  // Add event listener for keyboard navigation\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [role, selectedAnimalIndex]);\n\n  return (\n    <div className=\"app-root\">\n      <div className=\"timer-boundary-container\">\n        {/* Timer */}\n        <TimerDisplay initialTime={10} onTimerEnd={handleTimerEnd} />\n\n        {/* Color Picker */}\n        <div className=\"color-picker\">\n          {role === \"sender\" && (\n            <SenderScreen\n              animals={ANIMALS}\n              refreshPositions={refreshPositions}\n              senderColor={senderColor}\n              score={score}\n              onColorChange={handleColorChange}\n            />\n          )}\n        </div>\n\n        {/* Color Display */}\n        <div className=\"color-display-container\">\n          <div className=\"color-display\">\n            {role === \"receiver\" && (\n              <ReceiverScreen\n                animals={ANIMALS}\n                refreshPositions={refreshPositions}\n                senderColor={senderColor}\n                score={score}\n                selectedAnimalIndex={selectedAnimalIndex}\n                onAnimalSelect={(animal) => handleColorMatch(animal.color)}\n              />\n            )}\n          </div>\n        </div>\n\n        {/* Score */}\n        <div className=\"fancy-score\">Score: {score}</div>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}