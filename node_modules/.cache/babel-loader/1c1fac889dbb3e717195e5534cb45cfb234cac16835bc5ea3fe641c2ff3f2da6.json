{"ast":null,"code":"var _jsxFileName = \"/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./assets/styles/main.css\";\nimport AnimalGrid from \"./components/AnimalGrid/AnimalGrid\";\nimport ColorPicker from \"./components/ColorPicker/ColorPicker\";\nimport ColorDisplay from \"./components/ColorDisplay/ColorDisplay\";\nimport ScoreBoard from \"./components/ScoreBoard/ScoreBoard\";\nimport { colorDistance } from \"./utils/colorUtils\";\nimport \"./screens/ReceiverScreen.css\";\n\n// Animal images\nimport dog from \"./assets/images/dog.jpg\";\nimport butterfly from \"./assets/images/butterfly.jpg\";\nimport giraffe from \"./assets/images/giraffe.png\";\nimport deer from \"./assets/images/deer.png\";\nimport elephant from \"./assets/images/elephant.jpg\";\n\n// Animal data with names, images, and associated colors\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ANIMALS = [{\n  name: \"Dog\",\n  image: dog,\n  color: \"#deb887\"\n}, {\n  name: \"Giraffe\",\n  image: giraffe,\n  color: \"#f4e285\"\n}, {\n  name: \"Butterfly\",\n  image: butterfly,\n  color: \"#ff69b4\"\n}, {\n  name: \"Deer\",\n  image: deer,\n  color: \"#a0522d\"\n}, {\n  name: \"Elephant\",\n  image: elephant,\n  color: \"#b0b0b0\"\n}];\n\n// Tolerance for color matching\nconst COLOR_TOLERANCE = 60;\nexport default function App() {\n  _s();\n  const [selectedColor, setSelectedColor] = useState(\"#FFFFFF\"); // Currently selected color\n  const [score, setScore] = useState(0); // Current score\n  const [timer, setTimer] = useState(10); // Countdown timer\n  const [refreshPositions, setRefreshPositions] = useState(0); // Trigger for refreshing animal positions\n  const [role, setRole] = useState(\"sender\"); // Current role: \"sender\" or \"receiver\"\n  const [senderColor, setSenderColor] = useState(\"#FFFFFF\"); // Color selected by the sender\n\n  // Function to handle color matching and scoring\n  const handleColorMatch = animalColor => {\n    const distance = colorDistance(senderColor, animalColor);\n    if (distance <= COLOR_TOLERANCE) {\n      setScore(prevScore => prevScore + 1);\n    }\n    setRole(\"sender\"); // Switch to sender role after animal selection\n    setTimer(10); // Reset the timer\n    setRefreshPositions(prev => prev + 1); // Randomize animal positions\n\n    // Reset the color display to white after 2 seconds\n    setTimeout(() => {\n      setSenderColor(\"#FFFFFF\");\n    }, 2000);\n  };\n\n  // Function to handle color change\n  const handleColorChange = newColor => {\n    setSenderColor(newColor); // Update the sender's selected color\n    setRole(\"receiver\"); // Switch to receiver role after color selection\n    setTimer(10); // Reset the timer\n    setRefreshPositions(prev => prev + 1); // Randomize animal positions\n\n    // Reset the color display to white after 2 seconds\n    setTimeout(() => {\n      setSenderColor(\"#FFFFFF\");\n    }, 2000);\n  };\n\n  // Countdown timer logic\n  useEffect(() => {\n    if (timer > 0) {\n      const interval = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1); // Decrement timer by 1\n      }, 1000);\n      return () => clearInterval(interval); // Cleanup interval on unmount or when timer changes\n    } else {\n      // Switch roles when the timer ends\n      setRole(prevRole => prevRole === \"sender\" ? \"receiver\" : \"sender\");\n      setTimer(10); // Reset timer to 10 seconds\n      setRefreshPositions(prev => prev + 1); // Trigger animal position refresh\n    }\n  }, [timer]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-root\",\n    children: role === \"sender\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(AnimalGrid, {\n        animals: ANIMALS,\n        refreshPositions: refreshPositions,\n        role: \"sender\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ColorPicker, {\n        onColorChange: handleColorChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"color-display-container\",\n        children: [/*#__PURE__*/_jsxDEV(ColorDisplay, {\n          color: senderColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"color-display\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSize: \"2em\",\n              fontWeight: \"bold\"\n            },\n            children: timer > 0 ? `Timer: ${timer}s` : \"Time's up!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n        score: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(AnimalGrid, {\n        animals: ANIMALS,\n        refreshPositions: refreshPositions,\n        role: \"receiver\",\n        onAnimalSelect: animal => handleColorMatch(animal.color)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"color-display-container\",\n        children: [/*#__PURE__*/_jsxDEV(ColorDisplay, {\n          color: senderColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"color-display\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSize: \"2em\",\n              fontWeight: \"bold\"\n            },\n            children: timer > 0 ? `Timer: ${timer}s` : \"Time's up!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n        score: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"yFxKmBD3w+8Y8epokrjUFJnD8w8=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","AnimalGrid","ColorPicker","ColorDisplay","ScoreBoard","colorDistance","dog","butterfly","giraffe","deer","elephant","jsxDEV","_jsxDEV","Fragment","_Fragment","ANIMALS","name","image","color","COLOR_TOLERANCE","App","_s","selectedColor","setSelectedColor","score","setScore","timer","setTimer","refreshPositions","setRefreshPositions","role","setRole","senderColor","setSenderColor","handleColorMatch","animalColor","distance","prevScore","prev","setTimeout","handleColorChange","newColor","interval","setInterval","prevTimer","clearInterval","prevRole","className","children","animals","fileName","_jsxFileName","lineNumber","columnNumber","onColorChange","style","fontSize","fontWeight","onAnimalSelect","animal","_c","$RefreshReg$"],"sources":["/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./assets/styles/main.css\";\nimport AnimalGrid from \"./components/AnimalGrid/AnimalGrid\";\nimport ColorPicker from \"./components/ColorPicker/ColorPicker\";\nimport ColorDisplay from \"./components/ColorDisplay/ColorDisplay\";\nimport ScoreBoard from \"./components/ScoreBoard/ScoreBoard\";\nimport { colorDistance } from \"./utils/colorUtils\";\nimport \"./screens/ReceiverScreen.css\";\n\n// Animal images\nimport dog from \"./assets/images/dog.jpg\";\nimport butterfly from \"./assets/images/butterfly.jpg\";\nimport giraffe from \"./assets/images/giraffe.png\";\nimport deer from \"./assets/images/deer.png\";\nimport elephant from \"./assets/images/elephant.jpg\";\n\n// Animal data with names, images, and associated colors\nconst ANIMALS = [\n  { name: \"Dog\", image: dog, color: \"#deb887\" },\n  { name: \"Giraffe\", image: giraffe, color: \"#f4e285\" },\n  { name: \"Butterfly\", image: butterfly, color: \"#ff69b4\" },\n  { name: \"Deer\", image: deer, color: \"#a0522d\" },\n  { name: \"Elephant\", image: elephant, color: \"#b0b0b0\" },\n];\n\n// Tolerance for color matching\nconst COLOR_TOLERANCE = 60;\n\nexport default function App() {\n  const [selectedColor, setSelectedColor] = useState(\"#FFFFFF\"); // Currently selected color\n  const [score, setScore] = useState(0); // Current score\n  const [timer, setTimer] = useState(10); // Countdown timer\n  const [refreshPositions, setRefreshPositions] = useState(0); // Trigger for refreshing animal positions\n  const [role, setRole] = useState(\"sender\"); // Current role: \"sender\" or \"receiver\"\n  const [senderColor, setSenderColor] = useState(\"#FFFFFF\"); // Color selected by the sender\n\n  // Function to handle color matching and scoring\n  const handleColorMatch = (animalColor) => {\n    const distance = colorDistance(senderColor, animalColor);\n    if (distance <= COLOR_TOLERANCE) {\n      setScore((prevScore) => prevScore + 1);\n    }\n    setRole(\"sender\"); // Switch to sender role after animal selection\n    setTimer(10); // Reset the timer\n    setRefreshPositions((prev) => prev + 1); // Randomize animal positions\n\n    // Reset the color display to white after 2 seconds\n    setTimeout(() => {\n      setSenderColor(\"#FFFFFF\");\n    }, 2000);\n  };\n\n  // Function to handle color change\n  const handleColorChange = (newColor) => {\n    setSenderColor(newColor); // Update the sender's selected color\n    setRole(\"receiver\"); // Switch to receiver role after color selection\n    setTimer(10); // Reset the timer\n    setRefreshPositions((prev) => prev + 1); // Randomize animal positions\n\n    // Reset the color display to white after 2 seconds\n    setTimeout(() => {\n      setSenderColor(\"#FFFFFF\");\n    }, 2000);\n  };\n\n  // Countdown timer logic\n  useEffect(() => {\n    if (timer > 0) {\n      const interval = setInterval(() => {\n        setTimer((prevTimer) => prevTimer - 1); // Decrement timer by 1\n      }, 1000);\n\n      return () => clearInterval(interval); // Cleanup interval on unmount or when timer changes\n    } else {\n      // Switch roles when the timer ends\n      setRole((prevRole) => (prevRole === \"sender\" ? \"receiver\" : \"sender\"));\n      setTimer(10); // Reset timer to 10 seconds\n      setRefreshPositions((prev) => prev + 1); // Trigger animal position refresh\n    }\n  }, [timer]);\n\n  return (\n    <div className=\"app-root\">\n      {role === \"sender\" ? (\n        <>\n          {/* Sender Screen */}\n          <AnimalGrid\n            animals={ANIMALS}\n            refreshPositions={refreshPositions}\n            role=\"sender\"\n          />\n          <ColorPicker onColorChange={handleColorChange} />\n          <div className=\"color-display-container\">\n            <ColorDisplay color={senderColor} />\n            <div className=\"color-display\">\n              <p style={{ fontSize: \"2em\", fontWeight: \"bold\" }}>\n                {timer > 0 ? `Timer: ${timer}s` : \"Time's up!\"}\n              </p>\n            </div>\n          </div>\n          <ScoreBoard score={score} />\n        </>\n      ) : (\n        <>\n          {/* Receiver Screen */}\n          <AnimalGrid\n            animals={ANIMALS}\n            refreshPositions={refreshPositions}\n            role=\"receiver\"\n            onAnimalSelect={(animal) => handleColorMatch(animal.color)}\n          />\n          <div className=\"color-display-container\">\n            <ColorDisplay color={senderColor} />\n            <div className=\"color-display\">\n              <p style={{ fontSize: \"2em\", fontWeight: \"bold\" }}>\n                {timer > 0 ? `Timer: ${timer}s` : \"Time's up!\"}\n              </p>\n            </div>\n          </div>\n          <ScoreBoard score={score} />\n        </>\n      )}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}