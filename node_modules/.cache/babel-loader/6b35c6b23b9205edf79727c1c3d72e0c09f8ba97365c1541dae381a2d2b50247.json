{"ast":null,"code":"var _jsxFileName = \"/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/components/AnimalGrid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AnimalGrid({\n  animals,\n  refreshPositions\n}) {\n  _s();\n  const [randomizedAnimals, setRandomizedAnimals] = useState([]);\n\n  // Helper function to check if two positions overlap\n  const isOverlapping = (newAnimal, existingAnimals, buffer = 10) => {\n    return existingAnimals.some(animal => {\n      const distanceX = Math.abs(newAnimal.left - animal.left);\n      const distanceY = Math.abs(newAnimal.top - animal.top);\n      return distanceX < buffer && distanceY < buffer; // Check if bounding boxes overlap\n    });\n  };\n\n  // Function to randomize positions of animals without overlaps\n  const randomizePositions = () => {\n    const randomized = [];\n    animals.forEach(animal => {\n      let newAnimal;\n      let attempts = 0;\n      do {\n        newAnimal = {\n          ...animal,\n          top: Math.random() * 80 + 10,\n          // Random top position (10% to 90%)\n          left: Math.random() * 80 + 10 // Random left position (10% to 90%)\n        };\n        attempts++;\n      } while (isOverlapping(newAnimal, randomized) && attempts < 100); // Retry if overlapping\n      randomized.push(newAnimal);\n    });\n    setRandomizedAnimals(randomized);\n  };\n\n  // Re-randomize positions whenever refreshPositions changes\n  useEffect(() => {\n    randomizePositions();\n  }, [refreshPositions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"animal-grid-rectangle\",\n    children: randomizedAnimals.map((animal, idx) => /*#__PURE__*/_jsxDEV(\"img\", {\n      src: animal.image,\n      alt: animal.name,\n      className: `animal-image-${idx + 1}`,\n      style: {\n        position: \"absolute\",\n        top: `${animal.top}%`,\n        left: `${animal.left}%`,\n        transform: \"translate(-50%, -50%)\"\n      }\n    }, animal.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(AnimalGrid, \"lYmMd19ckT48GsfIu6iL7SU34aE=\");\n_c = AnimalGrid;\nvar _c;\n$RefreshReg$(_c, \"AnimalGrid\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AnimalGrid","animals","refreshPositions","_s","randomizedAnimals","setRandomizedAnimals","isOverlapping","newAnimal","existingAnimals","buffer","some","animal","distanceX","Math","abs","left","distanceY","top","randomizePositions","randomized","forEach","attempts","random","push","className","children","map","idx","src","image","alt","name","style","position","transform","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/components/AnimalGrid.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport default function AnimalGrid({ animals, refreshPositions }) {\n  const [randomizedAnimals, setRandomizedAnimals] = useState([]);\n\n  // Helper function to check if two positions overlap\n  const isOverlapping = (newAnimal, existingAnimals, buffer = 10) => {\n    return existingAnimals.some((animal) => {\n      const distanceX = Math.abs(newAnimal.left - animal.left);\n      const distanceY = Math.abs(newAnimal.top - animal.top);\n      return distanceX < buffer && distanceY < buffer; // Check if bounding boxes overlap\n    });\n  };\n\n  // Function to randomize positions of animals without overlaps\n  const randomizePositions = () => {\n    const randomized = [];\n    animals.forEach((animal) => {\n      let newAnimal;\n      let attempts = 0;\n      do {\n        newAnimal = {\n          ...animal,\n          top: Math.random() * 80 + 10, // Random top position (10% to 90%)\n          left: Math.random() * 80 + 10, // Random left position (10% to 90%)\n        };\n        attempts++;\n      } while (isOverlapping(newAnimal, randomized) && attempts < 100); // Retry if overlapping\n      randomized.push(newAnimal);\n    });\n    setRandomizedAnimals(randomized);\n  };\n\n  // Re-randomize positions whenever refreshPositions changes\n  useEffect(() => {\n    randomizePositions();\n  }, [refreshPositions]);\n\n  return (\n    <div className=\"animal-grid-rectangle\">\n      {randomizedAnimals.map((animal, idx) => (\n        <img\n          key={animal.name}\n          src={animal.image}\n          alt={animal.name}\n          className={`animal-image-${idx + 1}`}\n          style={{\n            position: \"absolute\",\n            top: `${animal.top}%`,\n            left: `${animal.left}%`,\n            transform: \"translate(-50%, -50%)\",\n          }}\n        />\n      ))}\n    </div>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,eAAe,SAASC,UAAUA,CAAC;EAAEC,OAAO;EAAEC;AAAiB,CAAC,EAAE;EAAAC,EAAA;EAChE,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAE9D;EACA,MAAMU,aAAa,GAAGA,CAACC,SAAS,EAAEC,eAAe,EAAEC,MAAM,GAAG,EAAE,KAAK;IACjE,OAAOD,eAAe,CAACE,IAAI,CAAEC,MAAM,IAAK;MACtC,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACP,SAAS,CAACQ,IAAI,GAAGJ,MAAM,CAACI,IAAI,CAAC;MACxD,MAAMC,SAAS,GAAGH,IAAI,CAACC,GAAG,CAACP,SAAS,CAACU,GAAG,GAAGN,MAAM,CAACM,GAAG,CAAC;MACtD,OAAOL,SAAS,GAAGH,MAAM,IAAIO,SAAS,GAAGP,MAAM,CAAC,CAAC;IACnD,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMS,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,UAAU,GAAG,EAAE;IACrBlB,OAAO,CAACmB,OAAO,CAAET,MAAM,IAAK;MAC1B,IAAIJ,SAAS;MACb,IAAIc,QAAQ,GAAG,CAAC;MAChB,GAAG;QACDd,SAAS,GAAG;UACV,GAAGI,MAAM;UACTM,GAAG,EAAEJ,IAAI,CAACS,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE;UAAE;UAC9BP,IAAI,EAAEF,IAAI,CAACS,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAE;QACjC,CAAC;QACDD,QAAQ,EAAE;MACZ,CAAC,QAAQf,aAAa,CAACC,SAAS,EAAEY,UAAU,CAAC,IAAIE,QAAQ,GAAG,GAAG,EAAE,CAAC;MAClEF,UAAU,CAACI,IAAI,CAAChB,SAAS,CAAC;IAC5B,CAAC,CAAC;IACFF,oBAAoB,CAACc,UAAU,CAAC;EAClC,CAAC;;EAED;EACAtB,SAAS,CAAC,MAAM;IACdqB,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,CAAChB,gBAAgB,CAAC,CAAC;EAEtB,oBACEH,OAAA;IAAKyB,SAAS,EAAC,uBAAuB;IAAAC,QAAA,EACnCrB,iBAAiB,CAACsB,GAAG,CAAC,CAACf,MAAM,EAAEgB,GAAG,kBACjC5B,OAAA;MAEE6B,GAAG,EAAEjB,MAAM,CAACkB,KAAM;MAClBC,GAAG,EAAEnB,MAAM,CAACoB,IAAK;MACjBP,SAAS,EAAE,gBAAgBG,GAAG,GAAG,CAAC,EAAG;MACrCK,KAAK,EAAE;QACLC,QAAQ,EAAE,UAAU;QACpBhB,GAAG,EAAE,GAAGN,MAAM,CAACM,GAAG,GAAG;QACrBF,IAAI,EAAE,GAAGJ,MAAM,CAACI,IAAI,GAAG;QACvBmB,SAAS,EAAE;MACb;IAAE,GATGvB,MAAM,CAACoB,IAAI;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAUjB,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACnC,EAAA,CAtDuBH,UAAU;AAAAuC,EAAA,GAAVvC,UAAU;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}