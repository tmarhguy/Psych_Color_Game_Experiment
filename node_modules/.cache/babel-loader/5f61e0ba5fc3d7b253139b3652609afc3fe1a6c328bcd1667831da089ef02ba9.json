{"ast":null,"code":"var _jsxFileName = \"/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/components/ColorPicker/ColorPicker.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = [\"#FF0000\",\n// Red\n\"#FFFF00\",\n// Yellow\n\"#00FF00\",\n// Green\n\"#0000FF\",\n// Blue\n\"#4B0082\",\n// Indigo\n\"#EE82EE\",\n// Violet\n\"#FFFFFF\",\n// White\n\"#000000\",\n// Black\n\"#A52A2A\",\n// Brown\n\"#FFC0CB\" // Pink\n];\nfunction hexToRgb(hex) {\n  // Convert hex to [r, g, b]\n  const bigint = parseInt(hex.replace(\"#\", \"\"), 16);\n  return [bigint >> 16 & 255, bigint >> 8 & 255, bigint & 255];\n}\nconst ColorPicker = ({\n  onColorChange\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const drawCircularGradient = () => {\n      const width = canvas.width;\n      const height = canvas.height;\n      const centerX = width / 2;\n      const centerY = height / 2;\n      const maxRadius = Math.sqrt(centerX ** 2 + centerY ** 2);\n      const imageData = ctx.createImageData(width, height);\n      const data = imageData.data;\n      const numColors = COLORS.length;\n      for (let y = 0; y < height; ++y) {\n        for (let x = 0; x < width; ++x) {\n          const dx = x - centerX;\n          const dy = y - centerY;\n          const radius = Math.sqrt(dx * dx + dy * dy);\n          const angle = (Math.atan2(dy, dx) + 2 * Math.PI) % (2 * Math.PI);\n\n          // Map angle to color wheel\n          const angleRatio = angle / (2 * Math.PI);\n          const colorPos = angleRatio * numColors;\n          const colorIndex = Math.floor(colorPos) % numColors;\n          const nextColorIndex = (colorIndex + 1) % numColors;\n          const t = colorPos - colorIndex;\n\n          // Interpolate between two colors\n          const colorA = hexToRgb(COLORS[colorIndex]);\n          const colorB = hexToRgb(COLORS[nextColorIndex]);\n          const r = Math.round(colorA[0] * (1 - t) + colorB[0] * t);\n          const g = Math.round(colorA[1] * (1 - t) + colorB[1] * t);\n          const b = Math.round(colorA[2] * (1 - t) + colorB[2] * t);\n\n          // Optional: fade to white at the edges\n          const fade = 1 - radius / maxRadius;\n          const finalR = Math.round(r * fade + 255 * (1 - fade));\n          const finalG = Math.round(g * fade + 255 * (1 - fade));\n          const finalB = Math.round(b * fade + 255 * (1 - fade));\n          const idx = 4 * (y * width + x);\n          data[idx] = finalR;\n          data[idx + 1] = finalG;\n          data[idx + 2] = finalB;\n          data[idx + 3] = 255;\n        }\n      }\n      ctx.putImageData(imageData, 0, 0);\n    };\n    const resizeCanvas = () => {\n      const parent = canvas.parentElement;\n      canvas.width = parent.offsetWidth;\n      canvas.height = parent.offsetHeight;\n      drawCircularGradient();\n    };\n    resizeCanvas();\n    window.addEventListener(\"resize\", resizeCanvas);\n    return () => window.removeEventListener(\"resize\", resizeCanvas);\n  }, []);\n  const handleCanvasClick = event => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const rect = canvas.getBoundingClientRect();\n    const x = Math.round(event.clientX - rect.left);\n    const y = Math.round(event.clientY - rect.top);\n    const pixel = ctx.getImageData(x, y, 1, 1).data;\n    const [r, g, b, a] = pixel;\n    if (a === 0) return;\n    const hexColor = `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).padStart(6, '0')}`;\n    onColorChange(hexColor);\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"color-picker\",\n    onClick: handleCanvasClick,\n    style: {\n      width: \"50%\",\n      height: \"50%\",\n      display: \"block\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(ColorPicker, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = ColorPicker;\nexport default ColorPicker;\nvar _c;\n$RefreshReg$(_c, \"ColorPicker\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","COLORS","hexToRgb","hex","bigint","parseInt","replace","ColorPicker","onColorChange","_s","canvasRef","canvas","current","ctx","getContext","drawCircularGradient","width","height","centerX","centerY","maxRadius","Math","sqrt","imageData","createImageData","data","numColors","length","y","x","dx","dy","radius","angle","atan2","PI","angleRatio","colorPos","colorIndex","floor","nextColorIndex","t","colorA","colorB","r","round","g","b","fade","finalR","finalG","finalB","idx","putImageData","resizeCanvas","parent","parentElement","offsetWidth","offsetHeight","window","addEventListener","removeEventListener","handleCanvasClick","event","rect","getBoundingClientRect","clientX","left","clientY","top","pixel","getImageData","a","hexColor","toString","slice","padStart","ref","className","onClick","style","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/components/ColorPicker/ColorPicker.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\n\nconst COLORS = [\n  \"#FF0000\",    // Red\n  \"#FFFF00\",    // Yellow\n  \"#00FF00\",    // Green\n  \"#0000FF\",    // Blue\n  \"#4B0082\",    // Indigo\n  \"#EE82EE\",    // Violet\n  \"#FFFFFF\",    // White\n  \"#000000\",    // Black\n  \"#A52A2A\",    // Brown\n  \"#FFC0CB\",    // Pink\n];\n\nfunction hexToRgb(hex) {\n  // Convert hex to [r, g, b]\n  const bigint = parseInt(hex.replace(\"#\", \"\"), 16);\n  return [(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255];\n}\n\nconst ColorPicker = ({ onColorChange }) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    const drawCircularGradient = () => {\n      const width = canvas.width;\n      const height = canvas.height;\n      const centerX = width / 2;\n      const centerY = height / 2;\n      const maxRadius = Math.sqrt(centerX ** 2 + centerY ** 2);\n\n      const imageData = ctx.createImageData(width, height);\n      const data = imageData.data;\n      const numColors = COLORS.length;\n\n      for (let y = 0; y < height; ++y) {\n        for (let x = 0; x < width; ++x) {\n          const dx = x - centerX;\n          const dy = y - centerY;\n          const radius = Math.sqrt(dx * dx + dy * dy);\n          const angle = (Math.atan2(dy, dx) + 2 * Math.PI) % (2 * Math.PI);\n\n          // Map angle to color wheel\n          const angleRatio = angle / (2 * Math.PI);\n          const colorPos = angleRatio * numColors;\n          const colorIndex = Math.floor(colorPos) % numColors;\n          const nextColorIndex = (colorIndex + 1) % numColors;\n          const t = colorPos - colorIndex;\n\n          // Interpolate between two colors\n          const colorA = hexToRgb(COLORS[colorIndex]);\n          const colorB = hexToRgb(COLORS[nextColorIndex]);\n          const r = Math.round(colorA[0] * (1 - t) + colorB[0] * t);\n          const g = Math.round(colorA[1] * (1 - t) + colorB[1] * t);\n          const b = Math.round(colorA[2] * (1 - t) + colorB[2] * t);\n\n          // Optional: fade to white at the edges\n          const fade = 1 - radius / maxRadius;\n          const finalR = Math.round(r * fade + 255 * (1 - fade));\n          const finalG = Math.round(g * fade + 255 * (1 - fade));\n          const finalB = Math.round(b * fade + 255 * (1 - fade));\n\n          const idx = 4 * (y * width + x);\n          data[idx] = finalR;\n          data[idx + 1] = finalG;\n          data[idx + 2] = finalB;\n          data[idx + 3] = 255;\n        }\n      }\n      ctx.putImageData(imageData, 0, 0);\n    };\n\n    const resizeCanvas = () => {\n      const parent = canvas.parentElement;\n      canvas.width = parent.offsetWidth;\n      canvas.height = parent.offsetHeight;\n      drawCircularGradient();\n    };\n\n    resizeCanvas();\n    window.addEventListener(\"resize\", resizeCanvas);\n    return () => window.removeEventListener(\"resize\", resizeCanvas);\n  }, []);\n\n  const handleCanvasClick = (event) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const rect = canvas.getBoundingClientRect();\n    const x = Math.round(event.clientX - rect.left);\n    const y = Math.round(event.clientY - rect.top);\n    const pixel = ctx.getImageData(x, y, 1, 1).data;\n    const [r, g, b, a] = pixel;\n\n    if (a === 0) return;\n\n    const hexColor = `#${((1 << 24) + (r << 16) + (g << 8) + b)\n      .toString(16)\n      .slice(1)\n      .padStart(6, '0')}`;\n\n    onColorChange(hexColor);\n  };\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"color-picker\"\n      onClick={handleCanvasClick}\n      style={{ width: \"50%\", height: \"50%\", display: \"block\" }}\n    />\n  );\n};\n\nexport default ColorPicker;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}