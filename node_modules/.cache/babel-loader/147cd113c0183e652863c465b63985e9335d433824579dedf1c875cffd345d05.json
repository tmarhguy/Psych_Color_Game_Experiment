{"ast":null,"code":"var _jsxFileName = \"/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./assets/styles/main.css\";\nimport { colorDistance } from \"./utils/colorUtils\";\nimport SenderScreen from \"./screens/SenderScreen\";\nimport ReceiverScreen from \"./screens/ReceiverScreen\";\nimport TimerDisplay from \"./components/TimerDisplay/TimerDisplay\";\n\n// Animal images\nimport dog from \"./assets/images/dog.jpg\";\nimport butterfly from \"./assets/images/butterfly.jpg\";\nimport giraffe from \"./assets/images/giraffe.png\";\nimport deer from \"./assets/images/deer.png\";\nimport elephant from \"./assets/images/elephant.jpg\";\n\n// Animal data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANIMALS = [{\n  name: \"Dog\",\n  image: dog,\n  color: \"#deb887\"\n}, {\n  name: \"Giraffe\",\n  image: giraffe,\n  color: \"#f4e285\"\n}, {\n  name: \"Butterfly\",\n  image: butterfly,\n  color: \"#ff69b4\"\n}, {\n  name: \"Deer\",\n  image: deer,\n  color: \"#a0522d\"\n}, {\n  name: \"Elephant\",\n  image: elephant,\n  color: \"#b0b0b0\"\n}];\nconst COLOR_TOLERANCE = 60;\nexport default function App() {\n  _s();\n  const [role, setRole] = useState(\"sender\"); // Current role: \"sender\" or \"receiver\"\n  const [senderColor, setSenderColor] = useState(\"#FFFFFF\"); // Color selected by the sender\n  const [score, setScore] = useState(0); // Current score\n  const [timer, setTimer] = useState(10); // Countdown timer\n  const [refreshPositions, setRefreshPositions] = useState(0); // Trigger for refreshing animal positions\n\n  // Reset the color display to default after 2 seconds when the role changes\n  useEffect(() => {\n    if (timer > 0) {\n      const interval = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1); // Decrement timer by 1\n      }, 1000);\n      return () => clearInterval(interval); // Cleanup interval on unmount or when timer changes\n    } else {\n      // Handle timer reaching 0\n      handleRoleSwitch(); // Switch roles when the timer ends\n      setTimer(10); // Reset timer to 10 seconds\n    }\n  }, [timer]);\n\n  // Handle timer end (when timer reaches zero)\n  const handleTimerEnd = () => {\n    // Switch roles when the timer ends\n    setRole(prevRole => prevRole === \"sender\" ? \"receiver\" : \"sender\");\n    setTimer(10); // Reset timer to 10 seconds\n    setRefreshPositions(prev => prev + 1); // Trigger animal position refresh\n  };\n\n  // Handle color change by the sender\n  const handleColorChange = newColor => {\n    setSenderColor(newColor); // Update the sender's selected color\n    setRole(\"receiver\"); // Switch to receiver role\n    setTimer(10); // Reset the timer\n    setRefreshPositions(prev => prev + 1); // Randomize animal positions\n  };\n\n  // Handle color matching and scoring by the receiver\n  const handleColorMatch = animalColor => {\n    const distance = colorDistance(senderColor, animalColor);\n    if (distance <= COLOR_TOLERANCE) {\n      setScore(prevScore => prevScore + 1); // Increment score if the color matches\n    }\n    setRole(\"sender\"); // Switch to sender role\n    setTimer(10); // Reset the timer\n    setRefreshPositions(prev => prev + 1); // Randomize animal positions\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-root\",\n    children: role === \"sender\" ? /*#__PURE__*/_jsxDEV(SenderScreen, {\n      animals: ANIMALS,\n      refreshPositions: refreshPositions,\n      timer: timer,\n      senderColor: senderColor,\n      score: score,\n      onColorChange: handleColorChange,\n      timerDisplay: /*#__PURE__*/_jsxDEV(TimerDisplay, {\n        timer: timer,\n        setTimer: setTimer,\n        onTimerEnd: handleTimerEnd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ReceiverScreen, {\n      animals: ANIMALS,\n      refreshPositions: refreshPositions,\n      timer: timer,\n      senderColor: senderColor,\n      score: score,\n      onAnimalSelect: animal => handleColorMatch(animal.color),\n      timerDisplay: /*#__PURE__*/_jsxDEV(TimerDisplay, {\n        timer: timer,\n        setTimer: setTimer,\n        onTimerEnd: handleTimerEnd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"b+xlbsaKehpO72ZVnndnHNiGlDM=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","colorDistance","SenderScreen","ReceiverScreen","TimerDisplay","dog","butterfly","giraffe","deer","elephant","jsxDEV","_jsxDEV","ANIMALS","name","image","color","COLOR_TOLERANCE","App","_s","role","setRole","senderColor","setSenderColor","score","setScore","timer","setTimer","refreshPositions","setRefreshPositions","interval","setInterval","prevTimer","clearInterval","handleRoleSwitch","handleTimerEnd","prevRole","prev","handleColorChange","newColor","handleColorMatch","animalColor","distance","prevScore","className","children","animals","onColorChange","timerDisplay","onTimerEnd","fileName","_jsxFileName","lineNumber","columnNumber","onAnimalSelect","animal","_c","$RefreshReg$"],"sources":["/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./assets/styles/main.css\";\nimport { colorDistance } from \"./utils/colorUtils\";\nimport SenderScreen from \"./screens/SenderScreen\";\nimport ReceiverScreen from \"./screens/ReceiverScreen\";\nimport TimerDisplay from \"./components/TimerDisplay/TimerDisplay\";\n\n// Animal images\nimport dog from \"./assets/images/dog.jpg\";\nimport butterfly from \"./assets/images/butterfly.jpg\";\nimport giraffe from \"./assets/images/giraffe.png\";\nimport deer from \"./assets/images/deer.png\";\nimport elephant from \"./assets/images/elephant.jpg\";\n\n// Animal data\nconst ANIMALS = [\n  { name: \"Dog\", image: dog, color: \"#deb887\" },\n  { name: \"Giraffe\", image: giraffe, color: \"#f4e285\" },\n  { name: \"Butterfly\", image: butterfly, color: \"#ff69b4\" },\n  { name: \"Deer\", image: deer, color: \"#a0522d\" },\n  { name: \"Elephant\", image: elephant, color: \"#b0b0b0\" },\n];\n\nconst COLOR_TOLERANCE = 60;\n\nexport default function App() {\n  const [role, setRole] = useState(\"sender\"); // Current role: \"sender\" or \"receiver\"\n  const [senderColor, setSenderColor] = useState(\"#FFFFFF\"); // Color selected by the sender\n  const [score, setScore] = useState(0); // Current score\n  const [timer, setTimer] = useState(10); // Countdown timer\n  const [refreshPositions, setRefreshPositions] = useState(0); // Trigger for refreshing animal positions\n\n  // Reset the color display to default after 2 seconds when the role changes\n  useEffect(() => {\n    if (timer > 0) {\n      const interval = setInterval(() => {\n        setTimer((prevTimer) => prevTimer - 1); // Decrement timer by 1\n      }, 1000);\n  \n      return () => clearInterval(interval); // Cleanup interval on unmount or when timer changes\n    } else {\n      // Handle timer reaching 0\n      handleRoleSwitch(); // Switch roles when the timer ends\n      setTimer(10); // Reset timer to 10 seconds\n    }\n  }, [timer]);\n\n  // Handle timer end (when timer reaches zero)\n  const handleTimerEnd = () => {\n    // Switch roles when the timer ends\n    setRole((prevRole) => (prevRole === \"sender\" ? \"receiver\" : \"sender\"));\n    setTimer(10); // Reset timer to 10 seconds\n    setRefreshPositions((prev) => prev + 1); // Trigger animal position refresh\n  };\n\n  // Handle color change by the sender\n  const handleColorChange = (newColor) => {\n    setSenderColor(newColor); // Update the sender's selected color\n    setRole(\"receiver\"); // Switch to receiver role\n    setTimer(10); // Reset the timer\n    setRefreshPositions((prev) => prev + 1); // Randomize animal positions\n  };\n\n  // Handle color matching and scoring by the receiver\n  const handleColorMatch = (animalColor) => {\n    const distance = colorDistance(senderColor, animalColor);\n    if (distance <= COLOR_TOLERANCE) {\n      setScore((prevScore) => prevScore + 1); // Increment score if the color matches\n    }\n    setRole(\"sender\"); // Switch to sender role\n    setTimer(10); // Reset the timer\n    setRefreshPositions((prev) => prev + 1); // Randomize animal positions\n  };\n\n  return (\n    <div className=\"app-root\">\n      {role === \"sender\" ? (\n        <SenderScreen\n          animals={ANIMALS}\n          refreshPositions={refreshPositions}\n          timer={timer}\n          senderColor={senderColor}\n          score={score}\n          onColorChange={handleColorChange}\n          timerDisplay={\n            <TimerDisplay\n              timer={timer}\n              setTimer={setTimer}\n              onTimerEnd={handleTimerEnd}\n            />\n          }\n        />\n      ) : (\n        <ReceiverScreen\n          animals={ANIMALS}\n          refreshPositions={refreshPositions}\n          timer={timer}\n          senderColor={senderColor}\n          score={score}\n          onAnimalSelect={(animal) => handleColorMatch(animal.color)}\n          timerDisplay={\n            <TimerDisplay\n              timer={timer}\n              setTimer={setTimer}\n              onTimerEnd={handleTimerEnd}\n            />\n          }\n        />\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}