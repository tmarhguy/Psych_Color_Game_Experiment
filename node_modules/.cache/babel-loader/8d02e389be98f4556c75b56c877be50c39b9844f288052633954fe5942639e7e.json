{"ast":null,"code":"var _jsxFileName = \"/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/screens/ReceiverScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport AnimalGrid from \"../components/AnimalGrid/AnimalGrid\";\nimport ColorDisplay from \"../components/ColorDisplay/ColorDisplay\";\nimport ScoreBoard from \"../components/ScoreBoard/ScoreBoard\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ReceiverScreen({\n  animals,\n  refreshPositions,\n  timer,\n  senderColor,\n  score,\n  onAnimalSelect\n}) {\n  _s();\n  const [selectedIndex, setSelectedIndex] = useState(0); // Track the currently selected animal\n\n  // Handle keyboard navigation\n  const handleKeyDown = event => {\n    if (animals.length === 0) return;\n    let newIndex = selectedIndex;\n    switch (event.key) {\n      case \"ArrowUp\":\n      case \"ArrowLeft\":\n        newIndex = (selectedIndex - 1 + animals.length) % animals.length;\n        break;\n      case \"ArrowDown\":\n      case \"ArrowRight\":\n        newIndex = (selectedIndex + 1) % animals.length;\n        break;\n      case \"Enter\":\n        if (onAnimalSelect) onAnimalSelect(animals[selectedIndex]); // Trigger callback for selected animal\n        break;\n      default:\n        return;\n    }\n    setSelectedIndex(newIndex);\n  };\n\n  // Add event listener for keyboard navigation\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [selectedIndex, animals]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AnimalGrid, {\n      animals: animals,\n      refreshPositions: refreshPositions,\n      role: \"receiver\",\n      selectedIndex: selectedIndex // Pass the selected index to highlight the animal\n      ,\n      onAnimalSelect: onAnimalSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"color-display-container\",\n      children: [/*#__PURE__*/_jsxDEV(ColorDisplay, {\n        color: senderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"color-display\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: \"2em\",\n            fontWeight: \"bold\"\n          },\n          children: timer > 0 ? `Timer: ${timer}s` : \"Time's up!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(ReceiverScreen, \"D4YQCQY2pZ6fGhoc4JfJZCPfwwU=\");\n_c = ReceiverScreen;\nvar _c;\n$RefreshReg$(_c, \"ReceiverScreen\");","map":{"version":3,"names":["React","useState","useEffect","AnimalGrid","ColorDisplay","ScoreBoard","jsxDEV","_jsxDEV","Fragment","_Fragment","ReceiverScreen","animals","refreshPositions","timer","senderColor","score","onAnimalSelect","_s","selectedIndex","setSelectedIndex","handleKeyDown","event","length","newIndex","key","window","addEventListener","removeEventListener","children","role","fileName","_jsxFileName","lineNumber","columnNumber","className","color","style","fontSize","fontWeight","_c","$RefreshReg$"],"sources":["/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/screens/ReceiverScreen.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AnimalGrid from \"../components/AnimalGrid/AnimalGrid\";\nimport ColorDisplay from \"../components/ColorDisplay/ColorDisplay\";\nimport ScoreBoard from \"../components/ScoreBoard/ScoreBoard\";\n\nexport default function ReceiverScreen({\n  animals,\n  refreshPositions,\n  timer,\n  senderColor,\n  score,\n  onAnimalSelect,\n}) {\n  const [selectedIndex, setSelectedIndex] = useState(0); // Track the currently selected animal\n\n  // Handle keyboard navigation\n  const handleKeyDown = (event) => {\n    if (animals.length === 0) return;\n\n    let newIndex = selectedIndex;\n    switch (event.key) {\n      case \"ArrowUp\":\n      case \"ArrowLeft\":\n        newIndex = (selectedIndex - 1 + animals.length) % animals.length;\n        break;\n      case \"ArrowDown\":\n      case \"ArrowRight\":\n        newIndex = (selectedIndex + 1) % animals.length;\n        break;\n      case \"Enter\":\n        if (onAnimalSelect) onAnimalSelect(animals[selectedIndex]); // Trigger callback for selected animal\n        break;\n      default:\n        return;\n    }\n    setSelectedIndex(newIndex);\n  };\n\n  // Add event listener for keyboard navigation\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [selectedIndex, animals]);\n\n  return (\n    <>\n      <AnimalGrid\n        animals={animals}\n        refreshPositions={refreshPositions}\n        role=\"receiver\"\n        selectedIndex={selectedIndex} // Pass the selected index to highlight the animal\n        onAnimalSelect={onAnimalSelect}\n      />\n      <div className=\"color-display-container\">\n        <ColorDisplay color={senderColor} />\n        <div className=\"color-display\">\n          <p style={{ fontSize: \"2em\", fontWeight: \"bold\" }}>\n            {timer > 0 ? `Timer: ${timer}s` : \"Time's up!\"}\n          </p>\n        </div>\n      </div>\n      <ScoreBoard score={score} />\n    </>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}