{"ast":null,"code":"var _jsxFileName = \"/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/components/AnimalGrid/AnimalGrid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AnimalGrid({\n  animals,\n  refreshPositions,\n  onAnimalSelect,\n  role\n}) {\n  _s();\n  const [randomizedAnimals, setRandomizedAnimals] = useState([]);\n  const [selectedIndex, setSelectedIndex] = useState(0); // Track the currently selected animal\n\n  // Helper function to check if two positions overlap\n  const isOverlapping = (newAnimal, existingAnimals, buffer = 15) => {\n    return existingAnimals.some(animal => {\n      const distanceX = Math.abs(newAnimal.left - animal.left);\n      const distanceY = Math.abs(newAnimal.top - animal.top);\n      return distanceX < buffer && distanceY < buffer; // Check if bounding boxes overlap\n    });\n  };\n\n  // Function to randomize positions of animals without overlaps\n  const randomizePositions = () => {\n    const randomized = [];\n    animals.forEach(animal => {\n      let newAnimal;\n      let attempts = 0;\n      do {\n        newAnimal = {\n          ...animal,\n          top: Math.random() * 80 + 10,\n          // Random top position (10% to 90%)\n          left: Math.random() * 80 + 10 // Random left position (10% to 90%)\n        };\n        attempts++;\n      } while (isOverlapping(newAnimal, randomized) && attempts < 100); // Retry if overlapping\n      randomized.push(newAnimal);\n    });\n    setRandomizedAnimals(randomized);\n\n    // Randomly select an animal for the sender\n    if (role === \"sender\") {\n      const randomIndex = Math.floor(Math.random() * randomized.length);\n      setSelectedIndex(randomIndex);\n      if (onAnimalSelect) onAnimalSelect(randomized[randomIndex]); // Notify parent of the selected animal\n    }\n  };\n\n  // Handle keyboard navigation (only for receiver)\n  const handleKeyDown = event => {\n    if (role !== \"receiver\" || randomizedAnimals.length === 0) return;\n    let newIndex = selectedIndex;\n    switch (event.key) {\n      case \"ArrowUp\":\n      case \"ArrowLeft\":\n        newIndex = (selectedIndex - 1 + randomizedAnimals.length) % randomizedAnimals.length;\n        break;\n      case \"ArrowDown\":\n      case \"ArrowRight\":\n        newIndex = (selectedIndex + 1) % randomizedAnimals.length;\n        break;\n      case \"Enter\":\n        if (onAnimalSelect) onAnimalSelect(randomizedAnimals[selectedIndex]); // Trigger callback for selected animal\n        break;\n      default:\n        return;\n    }\n    setSelectedIndex(newIndex);\n  };\n  useEffect(() => {\n    randomizePositions();\n  }, [refreshPositions]);\n  useEffect(() => {\n    if (role === \"receiver\") {\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => {\n        window.removeEventListener(\"keydown\", handleKeyDown);\n      };\n    }\n  }, [selectedIndex, randomizedAnimals, role]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"animal-grid-rectangle\",\n    children: randomizedAnimals.map((animal, idx) => /*#__PURE__*/_jsxDEV(\"img\", {\n      src: animal.image,\n      alt: animal.name,\n      className: `animal-image-${idx + 1}`,\n      style: {\n        position: \"absolute\",\n        top: `${animal.top}%`,\n        left: `${animal.left}%`,\n        transform: \"translate(-50%, -50%)\",\n        border: idx === selectedIndex ? \"3px solid black\" : \"none\",\n        // Highlight the selected animal\n        cursor: \"pointer\"\n      }\n    }, animal.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(AnimalGrid, \"KQFswuh+Z/uSvxATnVOV68rZOb8=\");\n_c = AnimalGrid;\nvar _c;\n$RefreshReg$(_c, \"AnimalGrid\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AnimalGrid","animals","refreshPositions","onAnimalSelect","role","_s","randomizedAnimals","setRandomizedAnimals","selectedIndex","setSelectedIndex","isOverlapping","newAnimal","existingAnimals","buffer","some","animal","distanceX","Math","abs","left","distanceY","top","randomizePositions","randomized","forEach","attempts","random","push","randomIndex","floor","length","handleKeyDown","event","newIndex","key","window","addEventListener","removeEventListener","className","children","map","idx","src","image","alt","name","style","position","transform","border","cursor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tyronemarhguy/Desktop/Color-Comm-Game-Psych-Experiment/src/components/AnimalGrid/AnimalGrid.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport default function AnimalGrid({ animals, refreshPositions, onAnimalSelect, role }) {\n  const [randomizedAnimals, setRandomizedAnimals] = useState([]);\n  const [selectedIndex, setSelectedIndex] = useState(0); // Track the currently selected animal\n\n  // Helper function to check if two positions overlap\n  const isOverlapping = (newAnimal, existingAnimals, buffer = 15) => {\n    return existingAnimals.some((animal) => {\n      const distanceX = Math.abs(newAnimal.left - animal.left);\n      const distanceY = Math.abs(newAnimal.top - animal.top);\n      return distanceX < buffer && distanceY < buffer; // Check if bounding boxes overlap\n    });\n  };\n\n  // Function to randomize positions of animals without overlaps\n  const randomizePositions = () => {\n    const randomized = [];\n    animals.forEach((animal) => {\n      let newAnimal;\n      let attempts = 0;\n      do {\n        newAnimal = {\n          ...animal,\n          top: Math.random() * 80 + 10, // Random top position (10% to 90%)\n          left: Math.random() * 80 + 10, // Random left position (10% to 90%)\n        };\n        attempts++;\n      } while (isOverlapping(newAnimal, randomized) && attempts < 100); // Retry if overlapping\n      randomized.push(newAnimal);\n    });\n    setRandomizedAnimals(randomized);\n\n    // Randomly select an animal for the sender\n    if (role === \"sender\") {\n      const randomIndex = Math.floor(Math.random() * randomized.length);\n      setSelectedIndex(randomIndex);\n      if (onAnimalSelect) onAnimalSelect(randomized[randomIndex]); // Notify parent of the selected animal\n    }\n  };\n\n  // Handle keyboard navigation (only for receiver)\n  const handleKeyDown = (event) => {\n    if (role !== \"receiver\" || randomizedAnimals.length === 0) return;\n\n    let newIndex = selectedIndex;\n    switch (event.key) {\n      case \"ArrowUp\":\n      case \"ArrowLeft\":\n        newIndex = (selectedIndex - 1 + randomizedAnimals.length) % randomizedAnimals.length;\n        break;\n      case \"ArrowDown\":\n      case \"ArrowRight\":\n        newIndex = (selectedIndex + 1) % randomizedAnimals.length;\n        break;\n      case \"Enter\":\n        if (onAnimalSelect) onAnimalSelect(randomizedAnimals[selectedIndex]); // Trigger callback for selected animal\n        break;\n      default:\n        return;\n    }\n    setSelectedIndex(newIndex);\n  };\n\n  useEffect(() => {\n    randomizePositions();\n  }, [refreshPositions]);\n\n  useEffect(() => {\n    if (role === \"receiver\") {\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => {\n        window.removeEventListener(\"keydown\", handleKeyDown);\n      };\n    }\n  }, [selectedIndex, randomizedAnimals, role]);\n\n  return (\n    <div className=\"animal-grid-rectangle\">\n      {randomizedAnimals.map((animal, idx) => (\n        <img\n          key={animal.name}\n          src={animal.image}\n          alt={animal.name}\n          className={`animal-image-${idx + 1}`}\n          style={{\n            position: \"absolute\",\n            top: `${animal.top}%`,\n            left: `${animal.left}%`,\n            transform: \"translate(-50%, -50%)\",\n            border: idx === selectedIndex ? \"3px solid black\" : \"none\", // Highlight the selected animal\n            cursor: \"pointer\",\n          }}\n        />\n      ))}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}